"""Nikitich Polina"""

"""3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо 
создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству 
ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки арифметических 
операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), 
деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение, 
уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек 
исходных двух клеток.
Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек 
двух клеток больше нуля, иначе выводить соответствующее сообщение.
Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение 
количества ячеек этих двух клеток.
Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное 
деление количества ячеек этих двух клеток.
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество 
ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно 
переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются 
все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод 
make_order() вернет строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод 
make_order() вернет строку: *****\n*****\n*****.
"""


class Cage:

    def __init__(self, cell_number):
        self.cell_number = cell_number

    def __add__(self, other):
        """Сумма ячеек"""

        return Cage(self.cell_number + other.cell_number)

    def __sub__(self, other):
        """Разность ячеек"""

        if other.cell_number < self.cell_number:
            return Cage(self.cell_number - other.cell_number)
        else:
            return "Отрицательная разность. Вы вычитаете слишком большое количество клеток"

    def __mul__(self, other):
        """Произведение ячеек"""

        return Cage(self.cell_number * other.cell_number)

    def __truediv__(self, other):
        """Деление ячеек"""

        return Cage(self.cell_number // other.cell_number)

    def make_order(self, order):
        """Формирует порядок ячеек.
        Например: если кол-во ячеек 10, а
        входной параметр для функции make_order == 3
                    ->
        ***
        ***
        ***
        *
        """

        lines = self.cell_number // order
        remainder = self.cell_number % order
        string = "*" * order
        remainder_string = "*" * remainder
        result = [string for item in range(1, lines + 1)]
        result.append(remainder_string)
        return "\n".join(result)

    def __str__(self):
        return f"Количество клеток составляет {self.cell_number}"


test = Cage(10)
print(test)

test2 = Cage(4)

print(test + test2)
print(test - test2)
print(test * test2)
print(test / test2)

print(test.make_order(3))
